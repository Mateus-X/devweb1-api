generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Developer {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  password       String
  isAdmin        Boolean    @default(false) // Indicates if the developer is an admin

  //RELATIONSHIPS
  tasks          Task[]     @relation("DeveloperTasks") // Many-to-many relationship with tasks
  comments       Comment[]  // One-to-many relationship with comments
  projects       Project[]  @relation("DeveloperProjects") // Many-to-many relationship with projects
}

model Project {
  id             Int        @id @default(autoincrement())
  name           String
  description    String
  startDate      String
  endDate        String?
  status         Status @default(BACKLOG) // ENUM 'planned', 'in progress', 'completed'

  //RELATIONSHIPS
  tasks          Task[]     // One-to-many relationship with tasks
  developers     Developer[] @relation("DeveloperProjects") // Many-to-many relationship with developers
}

enum Status {
  BACKLOG 
  TODO 
  ON_PROCESS 
  DONE 
}

model Task {
  id             Int        @id @default(autoincrement())
  name           String
  description    String
  createdAt      DateTime   @default(now())
  status         TaskStatus @default(BACKLOG)     // ENUM 'pending = 0', 'in progress = 1', 'completed = 2'
  dueDate        DateTime?
  projectId      Int
  
  //RELATIONSHIPS
  comments       Comment[]  // One-to-many relationship with comments
  //CONSTRAINTS
  project        Project     @relation(fields: [projectId], references: [id])
  developers     Developer[] @relation("DeveloperTasks") 
}

model Comment {
  id          Int        @id @default(autoincrement())
  content     String
  createdAt   DateTime   @default(now())
  taskId      Int
  developerId Int

  //CONSTRAINTS
  task     Task    @relation(fields: [taskId], references: [id])
  developer   Developer  @relation(fields: [developerId], references: [id])
}

enum TaskStatus {
  BACKLOG
  TODO
  ONPROCESS
  DONE
}